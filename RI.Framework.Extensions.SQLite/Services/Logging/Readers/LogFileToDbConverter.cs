using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using RI.Framework.Collections.DirectLinq;
using RI.Framework.IO.Paths;
using RI.Framework.Services.Logging.Writers;
using RI.Framework.Utilities;
using RI.Framework.Utilities.Exceptions;
using RI.Framework.Utilities.Logging;




namespace RI.Framework.Services.Logging.Readers
{
	/// <summary>
	///     Converts log files generated by <see cref="FileLogWriter" /> and <see cref="DirectoryLogWriter" /> and adds their entries to a SQLite database file, similar to <see cref="SQLiteLogWriter"/>.
	/// </summary>
	/// <remarks>
	///     <para>
	///         If the specified database file already exists and has already log entries, the entries are added to the existing ones.
	///     </para>
	///     <para>
	///         When using the default SQLite log database configuration, the log entries are written to the table <c>Log</c>, using the following columns: <c>File</c>, <c>Timestamp</c>, <c>ThreadId</c>, <c>Severity</c>, <c>Source</c>, <c>Message</c>.
	///     </para>
	/// </remarks>
	/// <threadsafety static="false" instance="false" />
	public sealed class LogFileToDbConverter : LogSource
	{
		#region Instance Constructor/Destructor

		/// <summary>
		///     Creates a new instance of <see cref="LogFileToDbConverter" />.
		/// </summary>
		/// <remarks>
		///     <para>
		///         The default encoding <see cref="LogFileReader.DefaultEncoding" /> is used as the text encoding to read the log file.
		///     </para>
		/// </remarks>
		public LogFileToDbConverter ()
			: this(null, null)
		{
		}

		/// <summary>
		///     Creates a new instance of <see cref="LogFileToDbConverter" />.
		/// </summary>
		/// <param name="encoding"> The text encoding which is used to read the log file (can be null to use <see cref="LogFileReader.DefaultEncoding" />). </param>
		/// <param name="configuration"> The SQLite log database configuration which is used to write the log database (can be null to use the default configuration. </param>
		public LogFileToDbConverter (Encoding encoding, SQLiteLogConfiguration configuration)
		{
			this.Encoding = encoding ?? LogFileReader.DefaultEncoding;
			this.Configuration = configuration ?? new SQLiteLogConfiguration();
		}

		#endregion




		#region Instance Properties/Indexer

		/// <summary>
		///     Gets the SQLite log database configuration which is used to write the log database.
		/// </summary>
		/// <value>
		///     The SQLite log database configuration which is used to write the log database.
		/// </value>
		public SQLiteLogConfiguration Configuration { get; }

		/// <summary>
		///     Gets the encoding which is used to read the log file.
		/// </summary>
		/// <value>
		///     The encoding to read the log file.
		/// </value>
		public Encoding Encoding { get; }

		#endregion




		#region Instance Methods

		/// <summary>
		///     Converts all log files in a log directory, as created by <see cref="DirectoryLogWriter" />, and adds them to a log database.
		/// </summary>
		/// <param name="logDirectory"> The log directory. </param>
		/// <param name="dbFile"> The log database. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <remarks>
		///     <para>
		///         The default file name <see cref="DirectoryLogWriter.DefaultFileName" /> is used as the file name of the text log file in the log subdirectories.
		///     </para>
		/// </remarks>
		/// <exception cref="ArgumentNullException"> <paramref name="logDirectory" /> or <paramref name="dbFile" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logDirectory" /> or <paramref name="dbFile" /> contains wildcards. </exception>
		/// <exception cref="DirectoryNotFoundException"> The log directory as specified by <paramref name="logDirectory" /> does not exist. </exception>
		public LogFileToDbConverterResults ConvertDirectories (DirectoryPath logDirectory, FilePath dbFile)
		{
			return this.ConvertDirectories(logDirectory, dbFile, null);
		}

		/// <summary>
		///     Converts all log files in a log directory, as created by <see cref="DirectoryLogWriter" />, and adds them to a log database.
		/// </summary>
		/// <param name="logDirectory"> The log directory. </param>
		/// <param name="dbConnection"> The log database connection. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <remarks>
		///     <para>
		///         The default file name <see cref="DirectoryLogWriter.DefaultFileName" /> is used as the file name of the text log file in the log subdirectories.
		///     </para>
		/// </remarks>
		/// <exception cref="ArgumentNullException"> <paramref name="logDirectory" /> or <paramref name="dbConnection" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logDirectory" /> contains wildcards. </exception>
		/// <exception cref="DirectoryNotFoundException"> The log directory as specified by <paramref name="logDirectory" /> does not exist. </exception>
		public LogFileToDbConverterResults ConvertDirectories (DirectoryPath logDirectory, SQLiteConnection dbConnection)
		{
			return this.ConvertDirectories(logDirectory, dbConnection, null);
		}

		/// <summary>
		///     Converts all log files in a log directory, as created by <see cref="DirectoryLogWriter" />, and adds them to a log database.
		/// </summary>
		/// <param name="logDirectory"> The log directory. </param>
		/// <param name="dbFile"> The log database. </param>
		/// <param name="fileName"> The file name of the text log files in the log subdirectories (can be null to use <see cref="DirectoryLogWriter.DefaultFileName" />). </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <exception cref="ArgumentNullException"> <paramref name="logDirectory" /> or <paramref name="dbFile" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logDirectory" /> or <paramref name="dbFile" /> contains wildcards or <paramref name="fileName" /> is not a valid file name. </exception>
		/// <exception cref="DirectoryNotFoundException"> The log directory as specified by <paramref name="logDirectory" /> does not exist. </exception>
		public LogFileToDbConverterResults ConvertDirectories (DirectoryPath logDirectory, FilePath dbFile, string fileName)
		{
			if (dbFile == null)
			{
				throw new ArgumentNullException(nameof(dbFile));
			}

			if (dbFile.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(dbFile), "Wildcards are not allowed.");
			}

			using (SQLiteConnection connection = this.CreateConnection(dbFile))
			{
				return this.ConvertDirectories(logDirectory, connection, fileName);
			}
		}

		/// <summary>
		///     Converts all log files in a log directory, as created by <see cref="DirectoryLogWriter" />, and adds them to a log database.
		/// </summary>
		/// <param name="logDirectory"> The log directory. </param>
		/// <param name="dbConnection"> The log database connection. </param>
		/// <param name="fileName"> The file name of the text log files in the log subdirectories (can be null to use <see cref="DirectoryLogWriter.DefaultFileName" />). </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <exception cref="ArgumentNullException"> <paramref name="logDirectory" /> or <paramref name="dbConnection" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logDirectory" /> contains wildcards or <paramref name="fileName" /> is not a valid file name. </exception>
		/// <exception cref="DirectoryNotFoundException"> The log directory as specified by <paramref name="logDirectory" /> does not exist. </exception>
		public LogFileToDbConverterResults ConvertDirectories (DirectoryPath logDirectory, SQLiteConnection dbConnection, string fileName)
		{
			if (logDirectory == null)
			{
				throw new ArgumentNullException(nameof(logDirectory));
			}

			if (logDirectory.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(logDirectory), "Wildcards are not allowed.");
			}

			if (!logDirectory.Exists)
			{
				throw new DirectoryNotFoundException("The log directory does not exist: " + logDirectory + ".");
			}

			if (dbConnection == null)
			{
				throw new ArgumentNullException(nameof(dbConnection));
			}

			FilePath fileNamePath;
			try
			{
				fileNamePath = new FilePath(fileName ?? DirectoryLogWriter.DefaultFileName, false, true, PathProperties.GetSystemType());
			}
			catch (InvalidPathArgumentException)
			{
				throw new InvalidPathArgumentException(nameof(fileName), "Invalid file name.");
			}

			HashSet<FilePath> files = this.GetLogFilesFromDirectory(logDirectory, fileNamePath);
			LogFileToDbConverterResults results = this.ConvertFilesInternal(files, dbConnection);
			return results;
		}

		/// <summary>
		///     Converts all log files in a log directory, as created by <see cref="DirectoryLogWriter" />, and adds them to a log database.
		/// </summary>
		/// <param name="logDirectory"> The log directory. </param>
		/// <param name="dbFile"> The log database. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <remarks>
		///     <para>
		///         The default file name <see cref="DirectoryLogWriter.DefaultFileName" /> is used as the file name of the text log file in the log subdirectories.
		///     </para>
		/// </remarks>
		/// <exception cref="ArgumentNullException"> <paramref name="logDirectory" /> or <paramref name="dbFile" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logDirectory" /> or <paramref name="dbFile" /> contains wildcards. </exception>
		/// <exception cref="DirectoryNotFoundException"> The log directory as specified by <paramref name="logDirectory" /> does not exist. </exception>
		public async Task<LogFileToDbConverterResults> ConvertDirectoriesAsync (DirectoryPath logDirectory, FilePath dbFile)
		{
			return await this.ConvertDirectoriesAsync(logDirectory, dbFile, null).ConfigureAwait(false);
		}

		/// <summary>
		///     Converts all log files in a log directory, as created by <see cref="DirectoryLogWriter" />, and adds them to a log database.
		/// </summary>
		/// <param name="logDirectory"> The log directory. </param>
		/// <param name="dbConnection"> The log database connection. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <remarks>
		///     <para>
		///         The default file name <see cref="DirectoryLogWriter.DefaultFileName" /> is used as the file name of the text log file in the log subdirectories.
		///     </para>
		/// </remarks>
		/// <exception cref="ArgumentNullException"> <paramref name="logDirectory" /> or <paramref name="dbConnection" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logDirectory" /> contains wildcards. </exception>
		/// <exception cref="DirectoryNotFoundException"> The log directory as specified by <paramref name="logDirectory" /> does not exist. </exception>
		public async Task<LogFileToDbConverterResults> ConvertDirectoriesAsync (DirectoryPath logDirectory, SQLiteConnection dbConnection)
		{
			return await this.ConvertDirectoriesAsync(logDirectory, dbConnection, null).ConfigureAwait(false);
		}

		/// <summary>
		///     Converts all log files in a log directory, as created by <see cref="DirectoryLogWriter" />, and adds them to a log database.
		/// </summary>
		/// <param name="logDirectory"> The log directory. </param>
		/// <param name="dbFile"> The log database. </param>
		/// <param name="fileName"> The file name of the text log files in the log subdirectories (can be null to use <see cref="DirectoryLogWriter.DefaultFileName" />). </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <exception cref="ArgumentNullException"> <paramref name="logDirectory" /> or <paramref name="dbFile" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logDirectory" /> or <paramref name="dbFile" /> contains wildcards or <paramref name="fileName" /> is not a valid file name. </exception>
		/// <exception cref="DirectoryNotFoundException"> The log directory as specified by <paramref name="logDirectory" /> does not exist. </exception>
		public async Task<LogFileToDbConverterResults> ConvertDirectoriesAsync (DirectoryPath logDirectory, FilePath dbFile, string fileName)
		{
			if (dbFile == null)
			{
				throw new ArgumentNullException(nameof(dbFile));
			}

			if (dbFile.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(dbFile), "Wildcards are not allowed.");
			}

			using (SQLiteConnection connection = this.CreateConnection(dbFile))
			{
				return await this.ConvertDirectoriesAsync(logDirectory, connection, fileName).ConfigureAwait(false);
			}
		}

		/// <summary>
		///     Converts all log files in a log directory, as created by <see cref="DirectoryLogWriter" />, and adds them to a log database.
		/// </summary>
		/// <param name="logDirectory"> The log directory. </param>
		/// <param name="dbConnection"> The log database connection. </param>
		/// <param name="fileName"> The file name of the text log files in the log subdirectories (can be null to use <see cref="DirectoryLogWriter.DefaultFileName" />). </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <exception cref="ArgumentNullException"> <paramref name="logDirectory" /> or <paramref name="dbConnection" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logDirectory" /> contains wildcards or <paramref name="fileName" /> is not a valid file name. </exception>
		/// <exception cref="DirectoryNotFoundException"> The log directory as specified by <paramref name="logDirectory" /> does not exist. </exception>
		public async Task<LogFileToDbConverterResults> ConvertDirectoriesAsync (DirectoryPath logDirectory, SQLiteConnection dbConnection, string fileName)
		{
			if (logDirectory == null)
			{
				throw new ArgumentNullException(nameof(logDirectory));
			}

			if (logDirectory.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(logDirectory), "Wildcards are not allowed.");
			}

			if (!logDirectory.Exists)
			{
				throw new DirectoryNotFoundException("The log directory does not exist: " + logDirectory + ".");
			}

			if (dbConnection == null)
			{
				throw new ArgumentNullException(nameof(dbConnection));
			}

			FilePath fileNamePath;
			try
			{
				fileNamePath = new FilePath(fileName ?? DirectoryLogWriter.DefaultFileName, false, true, PathProperties.GetSystemType());
			}
			catch (InvalidPathArgumentException)
			{
				throw new InvalidPathArgumentException(nameof(fileName), "Invalid file name.");
			}

			return await Task<LogFileToDbConverterResults>.Factory.StartNew(x =>
			{
				Tuple<DirectoryPath, SQLiteConnection, string> state = (Tuple<DirectoryPath, SQLiteConnection, string>)x;
				return this.ConvertDirectories(state.Item1, state.Item2, state.Item3);
			}, new Tuple<DirectoryPath, SQLiteConnection, string>(logDirectory, dbConnection, fileNamePath), CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default).ConfigureAwait(false);
		}

		/// <summary>
		///     Converts a single log file and adds it to a log database.
		/// </summary>
		/// <param name="logFile"> The log file. </param>
		/// <param name="dbFile"> The log database. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <exception cref="ArgumentNullException"> <paramref name="logFile" /> or <paramref name="dbFile" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logFile" /> or <paramref name="dbFile" /> contains wildcards. </exception>
		/// <exception cref="FileNotFoundException"> The log file as specified by <paramref name="logFile" /> does not exist. </exception>
		public LogFileToDbConverterResults ConvertFile (FilePath logFile, FilePath dbFile)
		{
			if (dbFile == null)
			{
				throw new ArgumentNullException(nameof(dbFile));
			}

			if (dbFile.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(dbFile), "Wildcards are not allowed.");
			}

			using (SQLiteConnection connection = this.CreateConnection(dbFile))
			{
				return this.ConvertFile(logFile, connection);
			}
		}

		/// <summary>
		///     Converts a single log file and adds it to a log database.
		/// </summary>
		/// <param name="logFile"> The log file. </param>
		/// <param name="dbConnection"> The log database connection. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <exception cref="ArgumentNullException"> <paramref name="logFile" /> or <paramref name="dbConnection" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logFile" /> contains wildcards. </exception>
		/// <exception cref="FileNotFoundException"> The log file as specified by <paramref name="logFile" /> does not exist. </exception>
		public LogFileToDbConverterResults ConvertFile (FilePath logFile, SQLiteConnection dbConnection)
		{
			if (logFile == null)
			{
				throw new ArgumentNullException(nameof(logFile));
			}

			if (logFile.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(logFile), "Wildcards are not allowed.");
			}

			if (!logFile.Exists)
			{
				throw new FileNotFoundException("The log file does not exist: " + logFile + ".", logFile);
			}

			if (dbConnection == null)
			{
				throw new ArgumentNullException(nameof(dbConnection));
			}

			LogFileToDbConverterResults results = this.ConvertFilesInternal(new[] {logFile}, dbConnection);
			return results;
		}

		/// <summary>
		///     Converts a single log file and adds it to a log database.
		/// </summary>
		/// <param name="logFile"> The log file. </param>
		/// <param name="dbFile"> The log database. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <exception cref="ArgumentNullException"> <paramref name="logFile" /> or <paramref name="dbFile" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logFile" /> or <paramref name="dbFile" /> contains wildcards. </exception>
		/// <exception cref="FileNotFoundException"> The log file as specified by <paramref name="logFile" /> does not exist. </exception>
		public async Task<LogFileToDbConverterResults> ConvertFileAsync (FilePath logFile, FilePath dbFile)
		{
			if (dbFile == null)
			{
				throw new ArgumentNullException(nameof(dbFile));
			}

			if (dbFile.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(dbFile), "Wildcards are not allowed.");
			}

			using (SQLiteConnection connection = this.CreateConnection(dbFile))
			{
				return await this.ConvertFileAsync(logFile, connection).ConfigureAwait(false);
			}
		}

		/// <summary>
		///     Converts a single log file and adds it to a log database.
		/// </summary>
		/// <param name="logFile"> The log file. </param>
		/// <param name="dbConnection"> The log database connection. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <exception cref="ArgumentNullException"> <paramref name="logFile" /> or <paramref name="dbConnection" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logFile" />  contains wildcards. </exception>
		/// <exception cref="FileNotFoundException"> The log file as specified by <paramref name="logFile" /> does not exist. </exception>
		public async Task<LogFileToDbConverterResults> ConvertFileAsync (FilePath logFile, SQLiteConnection dbConnection)
		{
			if (logFile == null)
			{
				throw new ArgumentNullException(nameof(logFile));
			}

			if (logFile.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(logFile), "Wildcards are not allowed.");
			}

			if (!logFile.Exists)
			{
				throw new FileNotFoundException("The log file does not exist: " + logFile + ".", logFile);
			}

			if (dbConnection == null)
			{
				throw new ArgumentNullException(nameof(dbConnection));
			}

			return await Task<LogFileToDbConverterResults>.Factory.StartNew(x =>
			{
				Tuple<FilePath, SQLiteConnection> state = (Tuple<FilePath, SQLiteConnection>)x;
				return this.ConvertFile(state.Item1, state.Item2);
			}, new Tuple<FilePath, SQLiteConnection>(logFile, dbConnection), CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default).ConfigureAwait(false);
		}

		/// <summary>
		///     Converts one or more log files and adds them to a log database.
		/// </summary>
		/// <param name="logFiles"> The log files. </param>
		/// <param name="dbFile"> The log database. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <remarks>
		///     <para>
		///         <paramref name="logFiles" /> is enumerated only once.
		///     </para>
		/// </remarks>
		/// <exception cref="ArgumentNullException"> <paramref name="logFiles" /> or <paramref name="dbFile" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logFiles" /> or <paramref name="dbFile" /> contains wildcards. </exception>
		/// <exception cref="FileNotFoundException"> At least one log file as specified by <paramref name="logFiles" /> does not exist. </exception>
		public LogFileToDbConverterResults ConvertFiles (IEnumerable<FilePath> logFiles, FilePath dbFile)
		{
			if (dbFile == null)
			{
				throw new ArgumentNullException(nameof(dbFile));
			}

			if (dbFile.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(dbFile), "Wildcards are not allowed.");
			}

			using (SQLiteConnection connection = this.CreateConnection(dbFile))
			{
				return this.ConvertFiles(logFiles, connection);
			}
		}

		/// <summary>
		///     Converts one or more log files and adds them to a log database.
		/// </summary>
		/// <param name="logFiles"> The log files. </param>
		/// <param name="dbConnection"> The log database connection. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <remarks>
		///     <para>
		///         <paramref name="logFiles" /> is enumerated only once.
		///     </para>
		/// </remarks>
		/// <exception cref="ArgumentNullException"> <paramref name="logFiles" /> or <paramref name="dbConnection" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logFiles" /> contains wildcards. </exception>
		/// <exception cref="FileNotFoundException"> At least one log file as specified by <paramref name="logFiles" /> does not exist. </exception>
		public LogFileToDbConverterResults ConvertFiles (IEnumerable<FilePath> logFiles, SQLiteConnection dbConnection)
		{
			if (logFiles == null)
			{
				throw new ArgumentNullException(nameof(logFiles));
			}

			List<FilePath> logFileList = logFiles.ToList();

			foreach (FilePath logFile in logFileList)
			{
				if (logFile.HasWildcards)
				{
					throw new InvalidPathArgumentException(nameof(logFiles), "Wildcards are not allowed.");
				}

				if (!logFile.Exists)
				{
					throw new FileNotFoundException("The log file does not exist: " + logFile + ".", logFile);
				}
			}

			if (dbConnection == null)
			{
				throw new ArgumentNullException(nameof(dbConnection));
			}

			LogFileToDbConverterResults results = this.ConvertFilesInternal(logFileList, dbConnection);
			return results;
		}

		/// <summary>
		///     Converts one or more log files and adds them to a log database.
		/// </summary>
		/// <param name="logFiles"> The log files. </param>
		/// <param name="dbFile"> The log database. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <remarks>
		///     <para>
		///         <paramref name="logFiles" /> is enumerated only once.
		///     </para>
		/// </remarks>
		/// <exception cref="ArgumentNullException"> <paramref name="logFiles" /> or <paramref name="dbFile" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logFiles" /> or <paramref name="dbFile" /> contains wildcards. </exception>
		/// <exception cref="FileNotFoundException"> At least one log file as specified by <paramref name="logFiles" /> does not exist. </exception>
		public async Task<LogFileToDbConverterResults> ConvertFilesAsync (IEnumerable<FilePath> logFiles, FilePath dbFile)
		{
			if (dbFile == null)
			{
				throw new ArgumentNullException(nameof(dbFile));
			}

			if (dbFile.HasWildcards)
			{
				throw new InvalidPathArgumentException(nameof(dbFile), "Wildcards are not allowed.");
			}

			using (SQLiteConnection connection = this.CreateConnection(dbFile))
			{
				return await this.ConvertFilesAsync(logFiles, connection).ConfigureAwait(false);
			}
		}

		/// <summary>
		///     Converts one or more log files and adds them to a log database.
		/// </summary>
		/// <param name="logFiles"> The log files. </param>
		/// <param name="dbConnection"> The log database connection. </param>
		/// <returns>
		///     The conversion results.
		/// </returns>
		/// <remarks>
		///     <para>
		///         <paramref name="logFiles" /> is enumerated only once.
		///     </para>
		/// </remarks>
		/// <exception cref="ArgumentNullException"> <paramref name="logFiles" /> or <paramref name="dbConnection" /> is null. </exception>
		/// <exception cref="InvalidPathArgumentException"> <paramref name="logFiles" /> contains wildcards. </exception>
		/// <exception cref="FileNotFoundException"> At least one log file as specified by <paramref name="logFiles" /> does not exist. </exception>
		public async Task<LogFileToDbConverterResults> ConvertFilesAsync (IEnumerable<FilePath> logFiles, SQLiteConnection dbConnection)
		{
			if (logFiles == null)
			{
				throw new ArgumentNullException(nameof(logFiles));
			}

			List<FilePath> logFileList = logFiles.ToList();

			foreach (FilePath logFile in logFileList)
			{
				if (logFile.HasWildcards)
				{
					throw new InvalidPathArgumentException(nameof(logFiles), "Wildcards are not allowed.");
				}

				if (!logFile.Exists)
				{
					throw new FileNotFoundException("The log file does not exist: " + logFile + ".", logFile);
				}
			}

			if (dbConnection == null)
			{
				throw new ArgumentNullException(nameof(dbConnection));
			}

			return await Task<LogFileToDbConverterResults>.Factory.StartNew(x =>
			{
				Tuple<IEnumerable<FilePath>, SQLiteConnection> state = (Tuple<IEnumerable<FilePath>, SQLiteConnection>)x;
				return this.ConvertFiles(state.Item1, state.Item2);
			}, new Tuple<IEnumerable<FilePath>, SQLiteConnection>(logFileList, dbConnection), CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default).ConfigureAwait(false);
		}

		private LogFileToDbConverterResults ConvertFilesInternal (IEnumerable<FilePath> files, SQLiteConnection dbConnection)
		{
			LogFileToDbConverterResults results = new LogFileToDbConverterResults();

			string createTableCommandString = this.Configuration.BuildCreateTableCommand();
			string createIndicesCommandString = this.Configuration.BuildCreateIndexCommand();
			string insertEntryCommandString = this.Configuration.BuildInsertEntryCommand();

			try
			{
				if (dbConnection.State != ConnectionState.Open)
				{
					dbConnection.Open();
				}

				using (SQLiteCommand createTableCommand = new SQLiteCommand(createTableCommandString, dbConnection))
				{
					createTableCommand.ExecuteNonQuery();
				}

				if (createIndicesCommandString != null)
				{
					using (SQLiteCommand createIndicesCommand = new SQLiteCommand(createIndicesCommandString, dbConnection))
					{
						createIndicesCommand.ExecuteNonQuery();
					}
				}

				using (SQLiteTransaction transaction = dbConnection.BeginTransaction())
				{
					foreach (FilePath file in files)
					{
						results.Files.Add(file);

						int count = 0;
						using (LogFileReader lfr = new LogFileReader(file, this.Encoding))
						{
							while (lfr.ReadNext())
							{
								if (lfr.CurrentValid)
								{
									using (SQLiteCommand insertCommand = new SQLiteCommand(insertEntryCommandString, dbConnection, transaction))
									{
										Dictionary<string, object> parameters = this.Configuration.BuildInsertEntryParameters(file, lfr.CurrentEntry);
										foreach (KeyValuePair<string, object> param in parameters)
										{
											insertCommand.Parameters.AddWithValue(param.Key, param.Value);
										}
										insertCommand.ExecuteNonQuery();
									}
								}
								else
								{
									results.AddError(file, lfr.CurrentLineNumber);
								}
							}
						}

						results.Entries.Add(file, count);
					}

					transaction.Commit();
				}
			}
			catch (Exception exception)
			{
				this.Log(LogLevel.Error, "Log file to SQLite database conversion failed: {0}{1}", Environment.NewLine, exception.ToDetailedString());

				results.Exception = exception;
			}

			return results;
		}

		private SQLiteConnection CreateConnection (FilePath dbFile) => this.Configuration.CreateConnection(dbFile);

		private HashSet<FilePath> GetLogFilesFromDirectory (DirectoryPath logDirectory, FilePath fileName)
		{
			HashSet<FilePath> files = new HashSet<FilePath>();
			List<DirectoryPath> subdirectories = logDirectory.GetSubdirectories(false, false);
			foreach (DirectoryPath subdirectory in subdirectories)
			{
				DateTime? timestamp = subdirectory.DirectoryName.ToDateTimeFromSortable('-');
				if (!timestamp.HasValue)
				{
					continue;
				}

				FilePath fileCandidate = subdirectory.AppendFile(fileName);
				if (!fileCandidate.Exists)
				{
					continue;
				}

				files.Add(fileCandidate);
			}
			return files;
		}

		#endregion
	}
}
